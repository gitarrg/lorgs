app: lorrgs
service: lorrgs-api
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  region: eu-west-1
  stage: ${opt:stage, "dev"}
  runtime: python3.8

  deploymentBucket:
    name: lorrgs-serverless-deployments

################################################################################
# package:
package:
  individually: true # package each module (eg.: "backend") individually
  patterns:
    - "!*/**"
    # - "lorgs/**"
    # - google_creds.json

plugins:
  # - serverless-python-requirements
  - serverless-layers
  - serverless-deployment-bucket


custom:
#   # pythonRequirements:
#   #   layer: true
  serverless-layers:
    - main_layer:
        functions:
          - main
        dependenciesPath: ./requirements.txt
    - auth_layer:
        functions:
          - auth

#   ####################################
#   # Custom Config
#   config:
#     LORGS_CONFIG_NAME: ${opt:LORGS_CONFIG_NAME, lorgs.config.ProductionConfig}
#     SECRET_KEY: ${opt:SECRET_KEY}
#     # Third Party Credentials
#     MONGO_URI: ${opt:MONGO_URI}
#     WCL_CLIENT_ID: ${opt:WCL_CLIENT_ID}
#     WCL_CLIENT_SECRET: ${opt:WCL_CLIENT_SECRET}
#     # Discord Auth
#     DISCORD_CLIENT_ID: ${opt:DISCORD_CLIENT_ID}
#     DISCORD_CLIENT_SECRET: ${opt:DISCORD_CLIENT_SECRET}
#     DISCORD_BOT_TOKEN: ${opt:DISCORD_BOT_TOKEN}


################################################################################
# Functions:

functions:
  main:  # main function for "all" endpoints
    runtime: python3.8
    memorySize: 128 # optional, in MB, default is 1024
    timeout: 6 # optional, in seconds, default is 6
    # module: lorgs
    handler: lorgs.app.create_handler
    environment:
      LORGS_CONFIG_NAME: lorgs.config.ProductionConfig
      SECRET_KEY: ${env:SECRET_KEY}

      # Third Party Credentials
      MONGO_URI: ${env:MONGO_URI}
      # WCL_CLIENT_ID: ${opt:WCL_CLIENT_ID}
      # WCL_CLIENT_SECRET: ${opt:WCL_CLIENT_SECRET}

      # DISCORD_CLIENT_ID: ${opt:DISCORD_CLIENT_ID}
      # DISCORD_CLIENT_SECRET: ${opt:DISCORD_CLIENT_SECRET}
      # DISCORD_BOT_TOKEN: ${opt:DISCORD_BOT_TOKEN}
      GOOGLE_APPLICATION_CREDENTIALS: "./google_creds.json"
    events:
      - http: GET /
      - http: GET /{proxy+}
    # layers:
    #   - Ref: PythonRequirementsLambdaLayer
    package:
      patterns:
        - "lorgs/**"


  auth:
    runtime: python3.8
    memorySize: 128 # optional, in MB, default is 1024
    timeout: 6 # optional, in seconds, default is 6
    handler: lorrgs_auth.handler.create_handler
    package:
      patterns:
        - "lorrgs_auth/**"
    events:
      - http: GET /auth/{proxy+}

################################################################################
# Resources:
resources:
  Resources:

    ####################################
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: test_2a
          PriceClass: PriceClass_100
          DefaultRootObject: "index.html"

          #########################
          # Behaviours
          DefaultCacheBehavior:
            AllowedMethods: [GET, OPTIONS, HEAD]
            TargetOriginId: frontend_s3_origin
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            - PathPattern: "api/*"
              TargetOriginId: lambda_origin
              CachePolicyId: !Ref ApiOriginCachePolicy
              ViewerProtocolPolicy: redirect-to-https

          #########################
          # Origins
          Origins:
          # 1) S3 Origin
          - Id: frontend_s3_origin
            DomainName: lorrgs-frontend-dev.s3.${self:provider.region}.amazonaws.com  # TODO: use `CF`-Expression
            S3OriginConfig: {}
          # 2) Lambda Origin
          - Id: lambda_origin
            DomainName: !Sub "${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com"
            OriginPath: /${self:provider.stage}
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

    ApiOriginCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: ${self:service}-${self:provider.stage}-api-cache-policy
          MinTTL: 10
          MaxTTL: 3600    # 1 hour
          DefaultTTL: 300 # 5 minutes
          ParametersInCacheKeyAndForwardedToOrigin:
            CookiesConfig:
              CookieBehavior: none
            EnableAcceptEncodingGzip: true
            EnableAcceptEncodingBrotli: true
            HeadersConfig:
              HeaderBehavior: whitelist
              Headers:
                - Authorization
                - Content-Type
            QueryStringsConfig:
              QueryStringBehavior: all
